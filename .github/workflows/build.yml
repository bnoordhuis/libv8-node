name: Build
on:
    - push

jobs:
  build-macos:
    name: Build (macOS)
    runs-on: macos-10.15
    steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: Bundle
          run: bundle install
        - name: Set metadata
          id: set-metadata
          run: |
              bundle exec ruby -e 'puts RUBY_PLATFORM' | tee ruby_platform
              echo "::set-output name=RUBY_PLATFORM::$(cat ruby_platform)"
              bundle exec ruby -e 'puts Gem.platforms.last.to_s' | tee gem_platform
              echo "::set-output name=GEM_PLATFORM::$(cat gem_platform)"
              bundle exec ruby -e 'puts Libv8::Node::VERSION' | tee gem_version
              echo "::set-output name=GEM_VERSION::$(cat gem_version)"
              bundle exec ruby -e 'puts Libv8::Node::NODE_VERSION' | tee node_version
              echo "::set-output name=NODE_VERSION::$(cat node_version)"
              bundle exec ruby -e 'puts Libv8::Node::LIBV8_VERSION' | tee libv8_version
              echo "::set-output name=LIBV8_VERSION::$(cat libv8_version)"
        - name: Download Node.js
          run: |
              ./download-node ${{ steps.set-metadata.outputs.NODE_VERSION }}
        - name: Extract Node.js
          run: |
              ./extract-node ${{ steps.set-metadata.outputs.NODE_VERSION }}
        - name: Validate V8 version
          run: |
              ruby -e 'h = File.read("src/node-${{ steps.set-metadata.outputs.NODE_VERSION }}/deps/v8/include/v8-version.h"); eval h.each_line.with_object([]) { |l, e| l =~ /#define (V8_[A-Z_]+)\s(\d+)/ && e << "#{$1} = #{$2}" }.join(";"); puts "#{V8_MAJOR_VERSION}.#{V8_MINOR_VERSION}.#{V8_BUILD_NUMBER}.#{V8_PATCH_LEVEL}"' | tee libv8_version_h
              diff libv8_version_h libv8_version
        - name: Build V8
          run: |
              ./build-libv8 ${{ steps.set-metadata.outputs.NODE_VERSION }}
        - name: Build Monolith
          run: |
              ./build-monolith ${{ steps.set-metadata.outputs.NODE_VERSION }}
        - name: Inject V8
          run: |
              ./inject-libv8 ${{ steps.set-metadata.outputs.NODE_VERSION }}
        - name: Build gem
          run: |
              bundle exec rake binary
        - name: Upload V8
          uses: actions/upload-artifact@v1
          with:
            name: v8-${{ steps.set-metadata.outputs.LIBV8_VERSION  }}-${{ steps.set-metadata.outputs.GEM_PLATFORM }}
            path: vendor
        - name: Upload gem
          uses: actions/upload-artifact@v1
          with:
            name: gem-${{ steps.set-metadata.outputs.GEM_VERSION  }}-${{ steps.set-metadata.outputs.GEM_PLATFORM }}
            path: pkg
  build-linux-glibc:
    name: Build (Linux glibc)
    runs-on: ubuntu-20.04
    container: ruby:2.3
    steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: Bundle
          run: bundle install
        - name: Set metadata
          id: set-metadata
          run: |
              bundle exec ruby -e 'puts RUBY_PLATFORM' | tee ruby_platform
              echo "::set-output name=RUBY_PLATFORM::$(cat ruby_platform)"
              bundle exec ruby -e 'puts Gem.platforms.last.to_s' | tee gem_platform
              echo "::set-output name=GEM_PLATFORM::$(cat gem_platform)"
              bundle exec ruby -e 'puts Libv8::Node::VERSION' | tee gem_version
              echo "::set-output name=GEM_VERSION::$(cat gem_version)"
              bundle exec ruby -e 'puts Libv8::Node::NODE_VERSION' | tee node_version
              echo "::set-output name=NODE_VERSION::$(cat node_version)"
              bundle exec ruby -e 'puts Libv8::Node::LIBV8_VERSION' | tee libv8_version
              echo "::set-output name=LIBV8_VERSION::$(cat libv8_version)"
        - name: Download Node.js
          run: |
              ./download-node ${{ steps.set-metadata.outputs.NODE_VERSION }}
        - name: Extract Node.js
          run: |
              ./extract-node ${{ steps.set-metadata.outputs.NODE_VERSION }}
        - name: Validate V8 version
          run: |
              ruby -e 'h = File.read("src/node-${{ steps.set-metadata.outputs.NODE_VERSION }}/deps/v8/include/v8-version.h"); eval h.each_line.with_object([]) { |l, e| l =~ /#define (V8_[A-Z_]+)\s(\d+)/ && e << "#{$1} = #{$2}" }.join(";"); puts "#{V8_MAJOR_VERSION}.#{V8_MINOR_VERSION}.#{V8_BUILD_NUMBER}.#{V8_PATCH_LEVEL}"' | tee libv8_version_h
              diff libv8_version_h libv8_version
        - name: Build V8
          run: |
              ./build-libv8 ${{ steps.set-metadata.outputs.NODE_VERSION }}
        - name: Build Monolith
          run: |
              ./build-monolith ${{ steps.set-metadata.outputs.NODE_VERSION }}
        - name: Inject V8
          run: |
              ./inject-libv8 ${{ steps.set-metadata.outputs.NODE_VERSION }}
        - name: Build gem
          run: |
              bundle exec rake binary
        - name: Upload V8
          uses: actions/upload-artifact@v1
          with:
            name: v8-${{ steps.set-metadata.outputs.LIBV8_VERSION  }}-${{ steps.set-metadata.outputs.GEM_PLATFORM }}
            path: vendor
        - name: Upload gem
          uses: actions/upload-artifact@v1
          with:
            name: gem-${{ steps.set-metadata.outputs.GEM_VERSION  }}-${{ steps.set-metadata.outputs.GEM_PLATFORM }}
            path: pkg
  build-linux-musl:
    name: Build (Linux musl)
    runs-on: ubuntu-20.04
    container: ruby:2.3-alpine
    steps:
        - name: Install system dependencies
          run: apk add --no-cache build-base bash python2 python3 git curl tar clang binutils-gold
        - name: Checkout
          uses: actions/checkout@v2
        - name: Bundle
          run: bundle install
        - name: Set metadata
          id: set-metadata
          run: |
              bundle exec ruby -e 'puts RUBY_PLATFORM' | tee ruby_platform
              echo "::set-output name=RUBY_PLATFORM::$(cat ruby_platform)"
              bundle exec ruby -e 'puts Gem.platforms.last.to_s' | tee gem_platform
              echo "::set-output name=GEM_PLATFORM::$(cat gem_platform)"
              bundle exec ruby -e 'puts Libv8::Node::VERSION' | tee gem_version
              echo "::set-output name=GEM_VERSION::$(cat gem_version)"
              bundle exec ruby -e 'puts Libv8::Node::NODE_VERSION' | tee node_version
              echo "::set-output name=NODE_VERSION::$(cat node_version)"
              bundle exec ruby -e 'puts Libv8::Node::LIBV8_VERSION' | tee libv8_version
              echo "::set-output name=LIBV8_VERSION::$(cat libv8_version)"
        - name: Download Node.js
          run: |
              ./download-node ${{ steps.set-metadata.outputs.NODE_VERSION }}
        - name: Extract Node.js
          run: |
              ./extract-node ${{ steps.set-metadata.outputs.NODE_VERSION }}
        - name: Validate V8 version
          run: |
              ruby -e 'h = File.read("src/node-${{ steps.set-metadata.outputs.NODE_VERSION }}/deps/v8/include/v8-version.h"); eval h.each_line.with_object([]) { |l, e| l =~ /#define (V8_[A-Z_]+)\s(\d+)/ && e << "#{$1} = #{$2}" }.join(";"); puts "#{V8_MAJOR_VERSION}.#{V8_MINOR_VERSION}.#{V8_BUILD_NUMBER}.#{V8_PATCH_LEVEL}"' | tee libv8_version_h
              diff libv8_version_h libv8_version
        - name: Build V8
          run: |
              ./build-libv8 ${{ steps.set-metadata.outputs.NODE_VERSION }}
        - name: Build Monolith
          run: |
              ./build-monolith ${{ steps.set-metadata.outputs.NODE_VERSION }}
        - name: Inject V8
          run: |
              ./inject-libv8 ${{ steps.set-metadata.outputs.NODE_VERSION }}
        - name: Build gem
          run: |
              bundle exec rake binary
        - name: Prepare artifacts
          run: |
              mkdir -p ${{ runner.temp }}/workspace
              cp -Rv pkg ${{ runner.temp }}/workspace/
              cp -Rv vendor ${{ runner.temp }}/workspace/
        - name: Upload V8
          uses: actions/upload-artifact@v1
          with:
            name: v8-${{ steps.set-metadata.outputs.LIBV8_VERSION  }}-${{ steps.set-metadata.outputs.GEM_PLATFORM }}
            path: vendor
        - name: Upload gem
          uses: actions/upload-artifact@v1
          with:
            name: gem-${{ steps.set-metadata.outputs.GEM_VERSION  }}-${{ steps.set-metadata.outputs.GEM_PLATFORM }}
            path: pkg
